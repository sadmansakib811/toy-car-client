
const Blogs = () => {
    return (
      <div>
        
        <div className="px-4 py-16 mx-auto sm:max-w-xl md:max-w-full lg:max-w-screen-xl md:px-24 lg:px-8 lg:py-20">
          <div className="flex flex-col max-w-screen-lg overflow-hidden bg-white border rounded shadow-sm lg:flex-row sm:mx-auto">
            <div className="relative lg:w-1/2">
              <img
                src="https://images.pexels.com/photos/3182812/pexels-photo-3182812.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=2&amp;h=750&amp;w=1260"
                alt=""
                className="object-cover w-full lg:absolute h-80 lg:h-full"
              />
              <svg
                className="absolute top-0 right-0 hidden h-full text-white lg:inline-block"
                viewBox="0 0 20 104"
                fill="currentColor"
              >
                <polygon points="17.3036738 5.68434189e-14 20 5.68434189e-14 20 104 0.824555778 104" />
              </svg>
            </div>
            <div className="flex flex-col justify-center p-8 bg-white lg:p-16 lg:pl-10 lg:w-1/2">
              <div>
                <p className="inline-block px-3 py-px mb-4 text-xs font-semibold tracking-wider text-teal-900 uppercase rounded-full bg-teal-accent-400">
                  Brand new
                </p>
              </div>
              <h5 className="mb-3 text-3xl font-extrabold leading-none sm:text-4xl">
                Read Our Blogs Daily and Earn Reward
              </h5>
              <p className="mb-5 text-gray-800">
                <span className="font-bold">Lorem ipsum</span> dolor sit amet,
                consectetur adipiscing elit. Etiam sem neque, molestie sit amet
                venenatis et, dignissim ut erat. Sed aliquet velit id dui
                eleifend, sed consequat odio sollicitudin.
              </p>
              <div className="flex items-center">
               

              
              </div>
            </div>
          </div>
        </div>
         {/* card max-w-7xl mx-auto */}
        <div className="flex flex-wrap justify-center mb-5">
        <div className='max-w-7xl mx-auto mb-5 flex w-1/3 justify-center'>
         <div className="card w-96 bg-base-100 shadow-xl ">
                  <div className="card-body">
                    <h2 className="card-title">What is an access token and refresh token? How do they work and where should we store them on the client-side?</h2>
                    <p>Access Token: An access token is a credential that is used to authenticate and authorize a user's access to protected resources in an application. It is typically a string of characters that is generated by an authentication server and provided to the client after a successful login. The client includes this token in each subsequent request to the server to access protected resources. The server verifies the token to ensure the user has the necessary permissions.

Refresh Token: A refresh token is also generated during the authentication process and is used to obtain a new access token when the current access token expires. It helps to maintain a user's session without requiring them to log in again. The refresh token is securely stored on the client-side, typically in an HTTP-only cookie or local storage, and is sent to the server to request a new access token when needed.</p>
                    <div className="card-actions justify-end">
                      
                    </div>
                  </div>
                </div>
                {/* card 2 */}
                <div className="card w-96 bg-base-100 shadow-xl ">
                  <div className="card-body">
                    <h2 className="card-title">Compare SQL and NoSQL databases</h2>
                    <p> SQL Databases: SQL (Structured Query Language) databases are based on a relational model, where data is organized into tables with predefined schemas. SQL databases use structured queries to manipulate and retrieve data. They are known for their strong consistency, ACID (Atomicity, Consistency, Isolation, Durability) properties, and support for complex joins and relationships. <br />NoSQL Databases: NoSQL (Not Only SQL) databases are non-relational databases that provide flexibility in storing and retrieving data. They use a variety of data models like key-value, document, columnar, and graph. NoSQL databases are horizontally scalable and can handle large amounts of data. They offer high performance, flexibility in schema design, and eventual consistency, but sacrifice some of the strict consistency guarantees of SQL databases.  </p>
                    <div className="card-actions justify-end">
                      
                    </div>
                  </div>
                </div>
                {/* card 3 */}
                <div className="card w-96 bg-base-100 shadow-xl ">
                  <div className="card-body">
                    <h2 className="card-title">What is Express.js? What is Nest.js?</h2>
                    <p>Express.js: Express.js is a minimal and flexible web application framework for Node.js. It provides a set of features and utilities to build web applications and APIs easily. Express.js simplifies routing, middleware handling, and request/response handling. It is widely used due to its simplicity and extensibility, allowing developers to build scalable and efficient web applications.

Nest.js: Nest.js is a progressive Node.js framework for building efficient, scalable, and maintainable server-side applications. It is built on top of Express.js and provides a modular and structured approach to application development. Nest.js leverages TypeScript to enhance productivity and offers features like dependency injection, declarative programming, and built-in support for modules, controllers, services, and middleware. It is commonly used for building enterprise-level applications and APIs.</p>
                    <div className="card-actions justify-end">
                      
                    </div>
                  </div>
                </div>
                {/* card 4 */}
                <div className="card w-96 bg-base-100 shadow-xl ">
                  <div className="card-body">
                    <h2 className="card-title">What is MongoDB Aggregate and how does it work?</h2>
                    <p>MongoDB Aggregate: MongoDB Aggregate is a powerful framework for performing data aggregation operations on MongoDB documents. It allows you to process and transform data, perform calculations, and extract meaningful insights from your MongoDB collections. The Aggregation Pipeline is a key feature of MongoDB Aggregate, which enables the processing of data through a series of stages.

In the Aggregation Pipeline, each stage applies a specific operation to the input documents and passes the results to the next stage. Stages can include operations like filtering, grouping, sorting, projecting fields, performing arithmetic operations, and more. The pipeline stages are processed sequentially, allowing you to perform complex data manipulations efficiently.

MongoDB Aggregate provides a rich set of operators and expressions to perform a wide range of aggregation operations, such as $match, $group, $sort, $project, $lookup, and many others. By using these stages and operators effectively, you can aggregate and analyze data in a flexible and powerful manner within MongoDB.

Please note that these explanations are simplified and meant to provide a basic understanding of the topics. For more detailed information, it is recommended</p>
                    <div className="card-actions justify-end">
                      
                    </div>
                  </div>
                </div>
         </div>
        </div>
       
      </div>
    );
};

export default Blogs;